import React, { useState, useEffect } from 'react';
import { Helmet } from "react-helmet-async";
import reportService from '../../Features/reportService';
import { WEBSITE_NAME } from "src/Data/constants";
import s from './MyReportsPage.module.scss';

const MyReportsPage = () => {
  const [reports, setReports] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);

  const fetchReports = async () => {
    try {
      setLoading(true);
      const response = await reportService.getMyReports();
      setReports(response.data);
      setError(null);
    } catch (err) {
      setError('Kh√¥ng th·ªÉ t·∫£i danh s√°ch b√°o c√°o. Vui l√≤ng ƒë·∫£m b·∫£o b·∫°n ƒë√£ ƒëƒÉng nh·∫≠p.');
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchReports();
    window.addEventListener('focus', fetchReports);
    return () => {
      window.removeEventListener('focus', fetchReports);
    };
  }, []);

  const handleRevokeReport = async (reportId) => {
    if (window.confirm('B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën thu h·ªìi b√°o c√°o n√†y kh√¥ng?')) {
      try {
        await reportService.revokeReport(reportId);
        setReports(currentReports =>
          currentReports.filter(report => report.id !== reportId)
        );
      } catch (err) {
        alert('Kh√¥ng th·ªÉ thu h·ªìi b√°o c√°o. Vui l√≤ng th·ª≠ l·∫°i.');
        console.error(err);
      }
    }
  };

  const formatDate = (dateString) => {
    return new Date(dateString).toLocaleDateString('vi-VN', {
      year: 'numeric',
      month: '2-digit',
      day: '2-digit'
    });
  };

  if (loading) {
    return (
      <>
        <Helmet>
          <title>ƒêang t·∫£i b√°o c√°o... - {WEBSITE_NAME}</title>
        </Helmet>
        <div className={s.pageContainer}>
          <div className={s.loadingContainer}>
            <div className={s.loadingSpinner}>
              <div className={s.spinner}></div>
              <p>ƒêang t·∫£i danh s√°ch b√°o c√°o c·ªßa b·∫°n...</p>
            </div>
          </div>
        </div>
      </>
    );
  }

  if (error) {
    return (
      <>
        <Helmet>
          <title>L·ªói t·∫£i b√°o c√°o - {WEBSITE_NAME}</title>
        </Helmet>
        <div className={s.pageContainer}>
          <div className={s.errorContainer}>
            <div className={s.errorMessage}>
              <span className={s.errorIcon}>‚ö†Ô∏è</span>
              <p>{error}</p>
            </div>
          </div>
        </div>
      </>
    );
  }

  return (
    <>
      <Helmet>
        <title>B√°o c√°o c·ªßa t√¥i - {WEBSITE_NAME}</title>
        <meta name="description" content={`Xem danh s√°ch c√°c b√°o c√°o s·∫£n ph·∫©m b·∫°n ƒë√£ g·ª≠i tr√™n ${WEBSITE_NAME}`} />
      </Helmet>
      
      <div className={s.pageContainer}>
        <div className={s.reportsPage}>
          <div className={s.pageHeader}>
            <div className={s.headerContent}>
              <h1 className={s.title}>
                <span className={s.titleIcon}>üìã</span>
                B√°o c√°o c·ªßa t√¥i
              </h1>
              <p className={s.subtitle}>
                Qu·∫£n l√Ω v√† theo d√µi c√°c b√°o c√°o s·∫£n ph·∫©m b·∫°n ƒë√£ g·ª≠i
              </p>
            </div>
            <div className={s.statsCard}>
              <div className={s.statItem}>
                <span className={s.statNumber}>{reports.length}</span>
                <span className={s.statLabel}>T·ªïng b√°o c√°o</span>
              </div>
              <div className={s.statDivider}></div>
              <div className={s.statItem}>
                <span className={s.statNumber}>
                  {reports.filter(r => !r.isResolved).length}
                </span>
                <span className={s.statLabel}>ƒêang x·ª≠ l√Ω</span>
              </div>
            </div>
          </div>

          {reports.length === 0 ? (
            <div className={s.emptyState}>
              <div className={s.emptyIcon}>üìù</div>
              <h3>Ch∆∞a c√≥ b√°o c√°o n√†o</h3>
              <p>B·∫°n ch∆∞a g·ª≠i b√°o c√°o n√†o. Khi b·∫°n b√°o c√°o s·∫£n ph·∫©m vi ph·∫°m, ch√∫ng s·∫Ω xu·∫•t hi·ªán ·ªü ƒë√¢y.</p>
            </div>
          ) : (
            <div className={s.reportsList}>
              {reports.map((report) => (
                <div key={report.id} className={s.reportCard}>
                  <div className={s.cardHeader}>
                    <div className={s.reportId}>
                      <span className={s.idLabel}>ID S·∫£n ph·∫©m:</span>
                      <span className={s.idValue}>{report.productId}</span>
                    </div>
                    <div className={s.statusBadge}>
                      <span className={`${s.status} ${report.isResolved ? s.resolved : s.pending}`}>
                        {report.isResolved ? (
                          <>
                            <span className={s.statusIcon}>‚úÖ</span>
                            ƒê√£ x·ª≠ l√Ω
                          </>
                        ) : (
                          <>
                            <span className={s.statusIcon}>‚è≥</span>
                            ƒêang x·ª≠ l√Ω
                          </>
                        )}
                      </span>
                    </div>
                  </div>

                  <div className={s.cardContent}>
                    <div className={s.reasonSection}>
                      <h4 className={s.sectionTitle}>
                        <span className={s.sectionIcon}>üö®</span>
                        L√Ω do b√°o c√°o
                      </h4>
                      <p className={s.reasonText}>{report.reason}</p>
                    </div>

                    <div className={s.metaInfo}>
                      <div className={s.metaItem}>
                        <span className={s.metaIcon}>üìÖ</span>
                        <span className={s.metaLabel}>Ng√†y g·ª≠i:</span>
                        <span className={s.metaValue}>{formatDate(report.createdAt)}</span>
                      </div>
                    </div>
                  </div>

                  {!report.isResolved && (
                    <div className={s.cardActions}>
                      <button
                        onClick={() => handleRevokeReport(report.id)}
                        className={s.revokeButton}
                      >
                        <span className={s.buttonIcon}>üóëÔ∏è</span>
                        Thu h·ªìi b√°o c√°o
                      </button>
                    </div>
                  )}
                </div>
              ))}
            </div>
          )}
        </div>
      </div>
    </>
  );
};

export default MyReportsPage;